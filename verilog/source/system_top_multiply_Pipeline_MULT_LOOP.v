// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_multiply_Pipeline_MULT_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        row_in_21,
        tmp_row_values_data_M_elems_address0,
        tmp_row_values_data_M_elems_ce0,
        tmp_row_values_data_M_elems_q0,
        data_in_01_cast,
        tmp_row_indices_data_M_elems_address0,
        tmp_row_indices_data_M_elems_ce0,
        tmp_row_indices_data_M_elems_q0,
        sub,
        tmp_mult_out_elems_value_address0,
        tmp_mult_out_elems_value_ce0,
        tmp_mult_out_elems_value_we0,
        tmp_mult_out_elems_value_d0,
        tmp_mult_out_elems_index_address0,
        tmp_mult_out_elems_index_ce0,
        tmp_mult_out_elems_index_we0,
        tmp_mult_out_elems_index_d0,
        tmp_mult_out_elems_last_address0,
        tmp_mult_out_elems_last_ce0,
        tmp_mult_out_elems_last_we0,
        tmp_mult_out_elems_last_d0,
        tmp_mult_out_elems_extra_flag_address0,
        tmp_mult_out_elems_extra_flag_ce0,
        tmp_mult_out_elems_extra_flag_we0,
        tmp_mult_out_elems_extra_flag_d0,
        data_in_23
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] row_in_21;
output  [5:0] tmp_row_values_data_M_elems_address0;
output   tmp_row_values_data_M_elems_ce0;
input  [7:0] tmp_row_values_data_M_elems_q0;
input  [7:0] data_in_01_cast;
output  [5:0] tmp_row_indices_data_M_elems_address0;
output   tmp_row_indices_data_M_elems_ce0;
input  [7:0] tmp_row_indices_data_M_elems_q0;
input  [63:0] sub;
output  [5:0] tmp_mult_out_elems_value_address0;
output   tmp_mult_out_elems_value_ce0;
output   tmp_mult_out_elems_value_we0;
output  [7:0] tmp_mult_out_elems_value_d0;
output  [5:0] tmp_mult_out_elems_index_address0;
output   tmp_mult_out_elems_index_ce0;
output   tmp_mult_out_elems_index_we0;
output  [7:0] tmp_mult_out_elems_index_d0;
output  [5:0] tmp_mult_out_elems_last_address0;
output   tmp_mult_out_elems_last_ce0;
output   tmp_mult_out_elems_last_we0;
output  [0:0] tmp_mult_out_elems_last_d0;
output  [5:0] tmp_mult_out_elems_extra_flag_address0;
output   tmp_mult_out_elems_extra_flag_ce0;
output   tmp_mult_out_elems_extra_flag_we0;
output  [0:0] tmp_mult_out_elems_extra_flag_d0;
input   data_in_23;

reg ap_idle;
reg tmp_row_values_data_M_elems_ce0;
reg tmp_row_indices_data_M_elems_ce0;
reg tmp_mult_out_elems_value_ce0;
reg tmp_mult_out_elems_value_we0;
reg tmp_mult_out_elems_index_ce0;
reg tmp_mult_out_elems_index_we0;
reg tmp_mult_out_elems_last_ce0;
reg tmp_mult_out_elems_last_we0;
reg tmp_mult_out_elems_extra_flag_ce0;
reg tmp_mult_out_elems_extra_flag_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln463_fu_184_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [15:0] data_in_01_cast_cast_fu_172_p1;
reg   [15:0] data_in_01_cast_cast_reg_243;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln463_fu_196_p1;
reg   [63:0] zext_ln463_reg_251;
wire   [0:0] icmp_ln465_fu_204_p2;
reg   [0:0] icmp_ln465_reg_257;
wire    ap_block_pp0_stage0;
reg   [5:0] i_fu_64;
wire   [5:0] add_ln463_fu_190_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_9;
wire   [7:0] mul_ln466_fu_226_p0;
wire   [7:0] mul_ln466_fu_226_p1;
wire   [15:0] mul_ln466_fu_226_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] mul_ln466_fu_226_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

system_top_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U4845(
    .din0(mul_ln466_fu_226_p0),
    .din1(mul_ln466_fu_226_p1),
    .dout(mul_ln466_fu_226_p2)
);

system_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln463_fu_184_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_64 <= add_ln463_fu_190_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_in_01_cast_cast_reg_243[7 : 0] <= data_in_01_cast_cast_fu_172_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln463_fu_184_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln465_reg_257 <= icmp_ln465_fu_204_p2;
        zext_ln463_reg_251[5 : 0] <= zext_ln463_fu_196_p1[5 : 0];
    end
end

always @ * begin
    if (((icmp_ln463_fu_184_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ * begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ * begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_9 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_9 = i_fu_64;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_mult_out_elems_extra_flag_ce0 = 1'b1;
    end else begin
        tmp_mult_out_elems_extra_flag_ce0 = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln463_fu_184_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln465_fu_204_p2 == 1'd1))) begin
        tmp_mult_out_elems_extra_flag_we0 = 1'b1;
    end else begin
        tmp_mult_out_elems_extra_flag_we0 = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_mult_out_elems_index_ce0 = 1'b1;
    end else begin
        tmp_mult_out_elems_index_ce0 = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln465_reg_257 == 1'd1))) begin
        tmp_mult_out_elems_index_we0 = 1'b1;
    end else begin
        tmp_mult_out_elems_index_we0 = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_mult_out_elems_last_ce0 = 1'b1;
    end else begin
        tmp_mult_out_elems_last_ce0 = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln463_fu_184_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln465_fu_204_p2 == 1'd1))) begin
        tmp_mult_out_elems_last_we0 = 1'b1;
    end else begin
        tmp_mult_out_elems_last_we0 = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_mult_out_elems_value_ce0 = 1'b1;
    end else begin
        tmp_mult_out_elems_value_ce0 = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln465_reg_257 == 1'd1))) begin
        tmp_mult_out_elems_value_we0 = 1'b1;
    end else begin
        tmp_mult_out_elems_value_we0 = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_row_indices_data_M_elems_ce0 = 1'b1;
    end else begin
        tmp_row_indices_data_M_elems_ce0 = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_row_values_data_M_elems_ce0 = 1'b1;
    end else begin
        tmp_row_values_data_M_elems_ce0 = 1'b0;
    end
end

always @ * begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln463_fu_190_p2 = (ap_sig_allocacmp_i_9 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_in_01_cast_cast_fu_172_p1 = data_in_01_cast;

assign icmp_ln463_fu_184_p2 = ((ap_sig_allocacmp_i_9 == 6'd41) ? 1'b1 : 1'b0);

assign icmp_ln465_fu_204_p2 = ((zext_ln463_fu_196_p1 < row_in_21) ? 1'b1 : 1'b0);

assign mul_ln466_fu_226_p0 = mul_ln466_fu_226_p00;

assign mul_ln466_fu_226_p00 = tmp_row_values_data_M_elems_q0;

assign mul_ln466_fu_226_p1 = data_in_01_cast_cast_reg_243;

assign tmp_mult_out_elems_extra_flag_address0 = zext_ln463_fu_196_p1;

assign tmp_mult_out_elems_extra_flag_d0 = data_in_23;

assign tmp_mult_out_elems_index_address0 = zext_ln463_reg_251;

assign tmp_mult_out_elems_index_d0 = tmp_row_indices_data_M_elems_q0;

assign tmp_mult_out_elems_last_address0 = zext_ln463_fu_196_p1;

assign tmp_mult_out_elems_last_d0 = ((zext_ln463_fu_196_p1 == sub) ? 1'b1 : 1'b0);

assign tmp_mult_out_elems_value_address0 = zext_ln463_reg_251;

assign tmp_mult_out_elems_value_d0 = mul_ln466_fu_226_p2[7:0];

assign tmp_row_indices_data_M_elems_address0 = zext_ln463_fu_196_p1;

assign tmp_row_values_data_M_elems_address0 = zext_ln463_fu_196_p1;

assign zext_ln463_fu_196_p1 = ap_sig_allocacmp_i_9;

always @ (posedge ap_clk) begin
    data_in_01_cast_cast_reg_243[15:8] <= 8'b00000000;
    zext_ln463_reg_251[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //system_top_multiply_Pipeline_MULT_LOOP
