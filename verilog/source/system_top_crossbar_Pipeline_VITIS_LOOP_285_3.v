// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_crossbar_Pipeline_VITIS_LOOP_285_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_reqOUT_ptr_10,
        tmp_reqOUT_ptr_11,
        tmp_reqOUT_ptr_12,
        tmp_reqOUT_ptr_13,
        tmp_repOUT_ptr_10,
        tmp_repOUT_ptr_11,
        tmp_repOUT_ptr_12,
        tmp_repOUT_ptr_13,
        reqIN_write_ptr_0,
        reqIN_write_ptr_0_ap_vld,
        repIN_write_ptr_0,
        repIN_write_ptr_0_ap_vld,
        reqIN_write_ptr_1,
        reqIN_write_ptr_1_ap_vld,
        repIN_write_ptr_1,
        repIN_write_ptr_1_ap_vld,
        reqIN_write_ptr_2,
        reqIN_write_ptr_2_ap_vld,
        repIN_write_ptr_2,
        repIN_write_ptr_2_ap_vld,
        reqIN_write_ptr_3,
        reqIN_write_ptr_3_ap_vld,
        repIN_write_ptr_3,
        repIN_write_ptr_3_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] tmp_reqOUT_ptr_10;
input  [7:0] tmp_reqOUT_ptr_11;
input  [7:0] tmp_reqOUT_ptr_12;
input  [7:0] tmp_reqOUT_ptr_13;
input  [7:0] tmp_repOUT_ptr_10;
input  [7:0] tmp_repOUT_ptr_11;
input  [7:0] tmp_repOUT_ptr_12;
input  [7:0] tmp_repOUT_ptr_13;
output  [7:0] reqIN_write_ptr_0;
output   reqIN_write_ptr_0_ap_vld;
output  [7:0] repIN_write_ptr_0;
output   repIN_write_ptr_0_ap_vld;
output  [7:0] reqIN_write_ptr_1;
output   reqIN_write_ptr_1_ap_vld;
output  [7:0] repIN_write_ptr_1;
output   repIN_write_ptr_1_ap_vld;
output  [7:0] reqIN_write_ptr_2;
output   reqIN_write_ptr_2_ap_vld;
output  [7:0] repIN_write_ptr_2;
output   repIN_write_ptr_2_ap_vld;
output  [7:0] reqIN_write_ptr_3;
output   reqIN_write_ptr_3_ap_vld;
output  [7:0] repIN_write_ptr_3;
output   repIN_write_ptr_3_ap_vld;

reg ap_idle;
reg reqIN_write_ptr_0_ap_vld;
reg repIN_write_ptr_0_ap_vld;
reg reqIN_write_ptr_1_ap_vld;
reg repIN_write_ptr_1_ap_vld;
reg reqIN_write_ptr_2_ap_vld;
reg repIN_write_ptr_2_ap_vld;
reg reqIN_write_ptr_3_ap_vld;
reg repIN_write_ptr_3_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln285_fu_130_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] select_ln287_fu_162_p3;
wire   [1:0] trunc_ln287_fu_170_p1;
wire   [7:0] select_ln288_fu_194_p3;
reg   [2:0] j_fu_70;
wire   [2:0] add_ln285_fu_136_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_4;
wire   [7:0] tmp_181_fu_142_p6;
wire   [0:0] icmp_ln287_fu_156_p2;
wire   [7:0] tmp_182_fu_174_p6;
wire   [0:0] icmp_ln288_fu_188_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

system_top_mux_43_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_43_8_1_1_U4622(
    .din0(tmp_reqOUT_ptr_10),
    .din1(tmp_reqOUT_ptr_11),
    .din2(tmp_reqOUT_ptr_12),
    .din3(tmp_reqOUT_ptr_13),
    .din4(ap_sig_allocacmp_j_4),
    .dout(tmp_181_fu_142_p6)
);

system_top_mux_43_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_43_8_1_1_U4623(
    .din0(tmp_repOUT_ptr_10),
    .din1(tmp_repOUT_ptr_11),
    .din2(tmp_repOUT_ptr_12),
    .din3(tmp_repOUT_ptr_13),
    .din4(ap_sig_allocacmp_j_4),
    .dout(tmp_182_fu_174_p6)
);

system_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln285_fu_130_p2 == 1'd0)) begin
            j_fu_70 <= add_ln285_fu_136_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_70 <= 3'd0;
        end
    end
end

always @ * begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln285_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ * begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ * begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_j_4 = 3'd0;
    end else begin
        ap_sig_allocacmp_j_4 = j_fu_70;
    end
end

always @ * begin
    if (((trunc_ln287_fu_170_p1 == 2'd0) & (icmp_ln285_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        repIN_write_ptr_0_ap_vld = 1'b1;
    end else begin
        repIN_write_ptr_0_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((trunc_ln287_fu_170_p1 == 2'd1) & (icmp_ln285_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        repIN_write_ptr_1_ap_vld = 1'b1;
    end else begin
        repIN_write_ptr_1_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((trunc_ln287_fu_170_p1 == 2'd2) & (icmp_ln285_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        repIN_write_ptr_2_ap_vld = 1'b1;
    end else begin
        repIN_write_ptr_2_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((trunc_ln287_fu_170_p1 == 2'd3) & (icmp_ln285_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        repIN_write_ptr_3_ap_vld = 1'b1;
    end else begin
        repIN_write_ptr_3_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((trunc_ln287_fu_170_p1 == 2'd0) & (icmp_ln285_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        reqIN_write_ptr_0_ap_vld = 1'b1;
    end else begin
        reqIN_write_ptr_0_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((trunc_ln287_fu_170_p1 == 2'd1) & (icmp_ln285_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        reqIN_write_ptr_1_ap_vld = 1'b1;
    end else begin
        reqIN_write_ptr_1_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((trunc_ln287_fu_170_p1 == 2'd2) & (icmp_ln285_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        reqIN_write_ptr_2_ap_vld = 1'b1;
    end else begin
        reqIN_write_ptr_2_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((trunc_ln287_fu_170_p1 == 2'd3) & (icmp_ln285_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        reqIN_write_ptr_3_ap_vld = 1'b1;
    end else begin
        reqIN_write_ptr_3_ap_vld = 1'b0;
    end
end

always @ * begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln285_fu_136_p2 = (ap_sig_allocacmp_j_4 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ * begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln285_fu_130_p2 = ((ap_sig_allocacmp_j_4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_156_p2 = ((tmp_181_fu_142_p6 == 8'd8) ? 1'b1 : 1'b0);

assign icmp_ln288_fu_188_p2 = ((tmp_182_fu_174_p6 == 8'd8) ? 1'b1 : 1'b0);

assign repIN_write_ptr_0 = select_ln288_fu_194_p3;

assign repIN_write_ptr_1 = select_ln288_fu_194_p3;

assign repIN_write_ptr_2 = select_ln288_fu_194_p3;

assign repIN_write_ptr_3 = select_ln288_fu_194_p3;

assign reqIN_write_ptr_0 = select_ln287_fu_162_p3;

assign reqIN_write_ptr_1 = select_ln287_fu_162_p3;

assign reqIN_write_ptr_2 = select_ln287_fu_162_p3;

assign reqIN_write_ptr_3 = select_ln287_fu_162_p3;

assign select_ln287_fu_162_p3 = ((icmp_ln287_fu_156_p2[0:0] == 1'b1) ? 8'd0 : tmp_181_fu_142_p6);

assign select_ln288_fu_194_p3 = ((icmp_ln288_fu_188_p2[0:0] == 1'b1) ? 8'd0 : tmp_182_fu_174_p6);

assign trunc_ln287_fu_170_p1 = ap_sig_allocacmp_j_4[1:0];

endmodule //system_top_crossbar_Pipeline_VITIS_LOOP_285_3
