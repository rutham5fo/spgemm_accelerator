// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_fetchNext_Pipeline_FETCH_LOOP_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sub_ln375,
        aux_memTable_address0,
        aux_memTable_ce0,
        aux_memTable_q0,
        fetch_indA_0,
        fetch_indA_1,
        tmp_count_out,
        tmp_count_out_ap_vld,
        tmp_sel_out,
        tmp_sel_out_ap_vld,
        second_found_out,
        second_found_out_ap_vld,
        found_in_mem_out,
        found_in_mem_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] sub_ln375;
output  [3:0] aux_memTable_address0;
output   aux_memTable_ce0;
input  [7:0] aux_memTable_q0;
input  [7:0] fetch_indA_0;
input  [7:0] fetch_indA_1;
output  [7:0] tmp_count_out;
output   tmp_count_out_ap_vld;
output  [7:0] tmp_sel_out;
output   tmp_sel_out_ap_vld;
output  [0:0] second_found_out;
output   second_found_out_ap_vld;
output  [0:0] found_in_mem_out;
output   found_in_mem_out_ap_vld;

reg ap_idle;
reg aux_memTable_ce0;
reg tmp_count_out_ap_vld;
reg tmp_sel_out_ap_vld;
reg second_found_out_ap_vld;
reg found_in_mem_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln374_fu_169_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] second_found_reg_127;
reg   [0:0] found_in_mem_reg_139;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] i_reg_299;
reg   [0:0] icmp_ln374_reg_304;
wire   [0:0] found_in_mem_1_fu_212_p2;
wire   [0:0] second_found_1_fu_242_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
wire   [63:0] zext_ln375_2_fu_191_p1;
reg   [7:0] tmp_sel_fu_56;
wire   [7:0] tmp_sel_1_fu_221_p3;
reg   [7:0] tmp_count_fu_60;
wire   [7:0] tmp_count_1_fu_229_p3;
reg   [1:0] i_3_fu_64;
wire   [1:0] add_ln374_fu_175_p2;
reg   [1:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
wire   [3:0] zext_ln375_1_fu_181_p1;
wire   [3:0] add_ln375_fu_185_p2;
wire   [0:0] icmp_ln375_fu_207_p2;
wire   [7:0] zext_ln375_fu_218_p1;
wire   [0:0] icmp_ln381_fu_237_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_214;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

system_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            found_in_mem_reg_139 <= 1'd0;
        end else if ((1'b1 == ap_condition_214)) begin
            found_in_mem_reg_139 <= found_in_mem_1_fu_212_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln374_fu_169_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_3_fu_64 <= add_ln374_fu_175_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_3_fu_64 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            second_found_reg_127 <= 1'd0;
        end else if ((1'b1 == ap_condition_214)) begin
            second_found_reg_127 <= second_found_1_fu_242_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_count_fu_60 <= 8'd2;
        end else if (((icmp_ln374_reg_304 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            tmp_count_fu_60 <= tmp_count_1_fu_229_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_sel_fu_56 <= 8'd3;
        end else if (((icmp_ln374_reg_304 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            tmp_sel_fu_56 <= tmp_sel_1_fu_221_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_299 <= ap_sig_allocacmp_i;
        icmp_ln374_reg_304 <= icmp_ln374_fu_169_p2;
    end
end

always @ * begin
    if (((icmp_ln374_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ * begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ * begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 2'd0;
    end else begin
        ap_sig_allocacmp_i = i_3_fu_64;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        aux_memTable_ce0 = 1'b1;
    end else begin
        aux_memTable_ce0 = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln374_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        found_in_mem_out_ap_vld = 1'b1;
    end else begin
        found_in_mem_out_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln374_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        second_found_out_ap_vld = 1'b1;
    end else begin
        second_found_out_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln374_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_count_out_ap_vld = 1'b1;
    end else begin
        tmp_count_out_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln374_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_sel_out_ap_vld = 1'b1;
    end else begin
        tmp_sel_out_ap_vld = 1'b0;
    end
end

always @ * begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln374_fu_175_p2 = (ap_sig_allocacmp_i + 2'd1);

assign add_ln375_fu_185_p2 = (sub_ln375 + zext_ln375_1_fu_181_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ * begin
    ap_condition_214 = ((icmp_ln374_reg_304 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign aux_memTable_address0 = zext_ln375_2_fu_191_p1;

assign found_in_mem_1_fu_212_p2 = (icmp_ln375_fu_207_p2 | found_in_mem_reg_139);

assign found_in_mem_out = found_in_mem_reg_139;

assign icmp_ln374_fu_169_p2 = ((ap_sig_allocacmp_i == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln375_fu_207_p2 = ((fetch_indA_0 == aux_memTable_q0) ? 1'b1 : 1'b0);

assign icmp_ln381_fu_237_p2 = ((fetch_indA_1 == aux_memTable_q0) ? 1'b1 : 1'b0);

assign second_found_1_fu_242_p2 = (second_found_reg_127 | icmp_ln381_fu_237_p2);

assign second_found_out = second_found_reg_127;

assign tmp_count_1_fu_229_p3 = ((icmp_ln375_fu_207_p2[0:0] == 1'b1) ? zext_ln375_fu_218_p1 : tmp_count_fu_60);

assign tmp_count_out = tmp_count_fu_60;

assign tmp_sel_1_fu_221_p3 = ((icmp_ln375_fu_207_p2[0:0] == 1'b1) ? zext_ln375_fu_218_p1 : tmp_sel_fu_56);

assign tmp_sel_out = tmp_sel_fu_56;

assign zext_ln375_1_fu_181_p1 = ap_sig_allocacmp_i;

assign zext_ln375_2_fu_191_p1 = add_ln375_fu_185_p2;

assign zext_ln375_fu_218_p1 = i_reg_299;

endmodule //system_top_fetchNext_Pipeline_FETCH_LOOP_1
