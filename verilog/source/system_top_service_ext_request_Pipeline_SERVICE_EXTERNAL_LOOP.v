// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_service_ext_request_Pipeline_SERVICE_EXTERNAL_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sub_ln286,
        service_memTable_address0,
        service_memTable_ce0,
        service_memTable_q0,
        prev_req,
        rowB_out,
        rowB_out_ap_vld,
        memFound_out,
        memFound_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] sub_ln286;
output  [3:0] service_memTable_address0;
output   service_memTable_ce0;
input  [7:0] service_memTable_q0;
input  [7:0] prev_req;
output  [7:0] rowB_out;
output   rowB_out_ap_vld;
output  [0:0] memFound_out;
output   memFound_out_ap_vld;

reg ap_idle;
reg service_memTable_ce0;
reg rowB_out_ap_vld;
reg memFound_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln285_fu_120_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] memFound_reg_95;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln285_reg_210;
wire   [0:0] trunc_ln286_fu_147_p1;
reg   [0:0] trunc_ln286_reg_219;
wire   [0:0] memFound_1_fu_164_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln286_2_fu_142_p1;
reg   [7:0] rowB_fu_48;
wire   [7:0] rowB_1_fu_173_p3;
reg   [1:0] i_fu_52;
wire   [1:0] add_ln285_fu_126_p2;
reg   [1:0] ap_sig_allocacmp_i_7;
wire    ap_block_pp0_stage0_01001;
wire   [3:0] zext_ln286_1_fu_132_p1;
wire   [3:0] add_ln286_fu_136_p2;
wire   [0:0] icmp_ln286_fu_159_p2;
wire   [7:0] zext_ln286_fu_170_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_188;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

system_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln285_fu_120_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_52 <= add_ln285_fu_126_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_188)) begin
            memFound_reg_95 <= memFound_1_fu_164_p2;
        end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            memFound_reg_95 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            rowB_fu_48 <= 8'd0;
        end else if (((icmp_ln285_reg_210 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            rowB_fu_48 <= rowB_1_fu_173_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln285_reg_210 <= icmp_ln285_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_120_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln286_reg_219 <= trunc_ln286_fu_147_p1;
    end
end

always @ * begin
    if (((icmp_ln285_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ * begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ * begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_7 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_7 = i_fu_52;
    end
end

always @ * begin
    if (((icmp_ln285_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        memFound_out_ap_vld = 1'b1;
    end else begin
        memFound_out_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln285_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rowB_out_ap_vld = 1'b1;
    end else begin
        rowB_out_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        service_memTable_ce0 = 1'b1;
    end else begin
        service_memTable_ce0 = 1'b0;
    end
end

always @ * begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln285_fu_126_p2 = (ap_sig_allocacmp_i_7 + 2'd1);

assign add_ln286_fu_136_p2 = (sub_ln286 + zext_ln286_1_fu_132_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ * begin
    ap_condition_188 = ((icmp_ln285_reg_210 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln285_fu_120_p2 = ((ap_sig_allocacmp_i_7 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln286_fu_159_p2 = ((prev_req == service_memTable_q0) ? 1'b1 : 1'b0);

assign memFound_1_fu_164_p2 = (memFound_reg_95 | icmp_ln286_fu_159_p2);

assign memFound_out = memFound_reg_95;

assign rowB_1_fu_173_p3 = ((icmp_ln286_fu_159_p2[0:0] == 1'b1) ? zext_ln286_fu_170_p1 : rowB_fu_48);

assign rowB_out = rowB_fu_48;

assign service_memTable_address0 = zext_ln286_2_fu_142_p1;

assign trunc_ln286_fu_147_p1 = ap_sig_allocacmp_i_7[0:0];

assign zext_ln286_1_fu_132_p1 = ap_sig_allocacmp_i_7;

assign zext_ln286_2_fu_142_p1 = add_ln286_fu_136_p2;

assign zext_ln286_fu_170_p1 = trunc_ln286_reg_219;

endmodule //system_top_service_ext_request_Pipeline_SERVICE_EXTERNAL_LOOP
