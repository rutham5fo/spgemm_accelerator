// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_copy_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        batch,
        matrixC_Addr_A,
        matrixC_EN_A,
        matrixC_WEN_A,
        matrixC_Din_A,
        matrixC_Dout_A,
        comp_output_3,
        comp_output_0,
        comp_output_1,
        comp_output_2
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] batch;
output  [31:0] matrixC_Addr_A;
output   matrixC_EN_A;
output  [127:0] matrixC_WEN_A;
output  [1023:0] matrixC_Din_A;
input  [1023:0] matrixC_Dout_A;
input  [719:0] comp_output_3;
input  [719:0] comp_output_0;
input  [719:0] comp_output_1;
input  [719:0] comp_output_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg matrixC_EN_A;
reg[127:0] matrixC_WEN_A;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] tmp_batch_fu_75_p2;
reg   [3:0] tmp_batch_reg_184;
wire   [63:0] zext_ln215_fu_128_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln214_fu_105_p2;
reg   [2:0] i_fu_52;
wire   [2:0] add_ln214_fu_111_p2;
wire   [31:0] matrixC_Addr_A_orig;
wire   [1:0] trunc_ln215_fu_117_p1;
wire   [5:0] add_ln_fu_121_p3;
wire   [0:0] icmp_ln9_fu_133_p2;
wire   [0:0] icmp_ln9_1_fu_139_p2;
wire   [719:0] select_ln9_fu_151_p3;
wire   [0:0] icmp_ln9_2_fu_145_p2;
wire   [719:0] select_ln9_1_fu_157_p3;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire   [719:0] matrixC_Din_A0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_52 <= 3'd0;
    end else if (((icmp_ln214_fu_105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_52 <= add_ln214_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_batch_reg_184 <= tmp_batch_fu_75_p2;
    end
end

always @ * begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ * begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln214_fu_105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ * begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln214_fu_105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ * begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        matrixC_EN_A = 1'b1;
    end else begin
        matrixC_EN_A = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln214_fu_105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        matrixC_WEN_A = 128'd340282366920938463463374607431768211455;
    end else begin
        matrixC_WEN_A = 128'd0;
    end
end

always @ * begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln214_fu_105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln214_fu_111_p2 = (i_fu_52 + 3'd1);

assign add_ln_fu_121_p3 = {{tmp_batch_reg_184}, {trunc_ln215_fu_117_p1}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign icmp_ln214_fu_105_p2 = ((i_fu_52 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln9_1_fu_139_p2 = ((trunc_ln215_fu_117_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln9_2_fu_145_p2 = ((trunc_ln215_fu_117_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_133_p2 = ((trunc_ln215_fu_117_p1 == 2'd0) ? 1'b1 : 1'b0);

assign matrixC_Addr_A = matrixC_Addr_A_orig << 32'd7;

assign matrixC_Addr_A_orig = zext_ln215_fu_128_p1;

assign matrixC_Din_A = matrixC_Din_A0;

assign matrixC_Din_A0 = ((icmp_ln9_2_fu_145_p2[0:0] == 1'b1) ? comp_output_2 : select_ln9_1_fu_157_p3);

assign select_ln9_1_fu_157_p3 = ((icmp_ln9_1_fu_139_p2[0:0] == 1'b1) ? comp_output_1 : select_ln9_fu_151_p3);

assign select_ln9_fu_151_p3 = ((icmp_ln9_fu_133_p2[0:0] == 1'b1) ? comp_output_0 : comp_output_3);

assign tmp_batch_fu_75_p2 = ($signed(batch) + $signed(4'd15));

assign trunc_ln215_fu_117_p1 = i_fu_52[1:0];

assign zext_ln215_fu_128_p1 = add_ln_fu_121_p3;

endmodule //system_top_copy_output
