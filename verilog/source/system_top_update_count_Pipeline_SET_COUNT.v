// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_update_count_Pipeline_SET_COUNT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln82,
        weight_2_reload,
        weight_3_reload,
        cmp78,
        req_loc_out,
        req_loc_out_ap_vld,
        procRegs_countTable_address0,
        procRegs_countTable_ce0,
        procRegs_countTable_we0,
        procRegs_countTable_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] zext_ln82;
input  [7:0] weight_2_reload;
input  [7:0] weight_3_reload;
input  [0:0] cmp78;
output  [7:0] req_loc_out;
output   req_loc_out_ap_vld;
output  [2:0] procRegs_countTable_address0;
output   procRegs_countTable_ce0;
output   procRegs_countTable_we0;
output  [7:0] procRegs_countTable_d0;

reg ap_idle;
reg req_loc_out_ap_vld;
reg procRegs_countTable_ce0;
reg procRegs_countTable_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln100_fu_119_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln108_1_fu_144_p1;
reg   [7:0] req_loc_fu_54;
wire   [7:0] select_ln104_1_fu_207_p3;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_req_loc_load_1;
reg   [1:0] i_fu_58;
wire   [1:0] add_ln100_fu_125_p2;
reg   [1:0] ap_sig_allocacmp_i_2;
wire   [2:0] zext_ln108_fu_134_p1;
wire   [2:0] add_ln108_fu_138_p2;
wire   [7:0] tmp_fu_149_p4;
wire   [0:0] icmp_ln104_fu_159_p2;
wire   [0:0] icmp_ln104_1_fu_165_p2;
wire   [0:0] trunc_ln104_fu_177_p1;
wire   [0:0] and_ln104_fu_171_p2;
wire   [7:0] zext_ln104_fu_181_p1;
wire   [7:0] select_ln104_fu_185_p3;
wire   [0:0] and_ln104_1_fu_201_p2;
wire   [7:0] req_loc_123_fu_193_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

system_top_mux_22_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_22_8_1_1_U3587(
    .din0(weight_2_reload),
    .din1(weight_3_reload),
    .din2(ap_sig_allocacmp_i_2),
    .dout(tmp_fu_149_p4)
);

system_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln100_fu_119_p2 == 1'd0)) begin
            i_fu_58 <= add_ln100_fu_125_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln100_fu_119_p2 == 1'd0)) begin
            req_loc_fu_54 <= select_ln104_1_fu_207_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            req_loc_fu_54 <= 8'd2;
        end
    end
end

always @ * begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln100_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ * begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ * begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_2 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_58;
    end
end

always @ * begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_req_loc_load_1 = 8'd2;
    end else begin
        ap_sig_allocacmp_req_loc_load_1 = req_loc_fu_54;
    end
end

always @ * begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        procRegs_countTable_ce0 = 1'b1;
    end else begin
        procRegs_countTable_ce0 = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln100_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        procRegs_countTable_we0 = 1'b1;
    end else begin
        procRegs_countTable_we0 = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln100_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        req_loc_out_ap_vld = 1'b1;
    end else begin
        req_loc_out_ap_vld = 1'b0;
    end
end

always @ * begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_125_p2 = (ap_sig_allocacmp_i_2 + 2'd1);

assign add_ln108_fu_138_p2 = (zext_ln82 + zext_ln108_fu_134_p1);

assign and_ln104_1_fu_201_p2 = (cmp78 & and_ln104_fu_171_p2);

assign and_ln104_fu_171_p2 = (icmp_ln104_fu_159_p2 & icmp_ln104_1_fu_165_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ * begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln100_fu_119_p2 = ((ap_sig_allocacmp_i_2 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln104_1_fu_165_p2 = ((ap_sig_allocacmp_req_loc_load_1 == 8'd2) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_159_p2 = ((tmp_fu_149_p4 == 8'd0) ? 1'b1 : 1'b0);

assign procRegs_countTable_address0 = zext_ln108_1_fu_144_p1;

assign procRegs_countTable_d0 = ((and_ln104_1_fu_201_p2[0:0] == 1'b1) ? 8'd5 : tmp_fu_149_p4);

assign req_loc_123_fu_193_p3 = ((cmp78[0:0] == 1'b1) ? select_ln104_fu_185_p3 : ap_sig_allocacmp_req_loc_load_1);

assign req_loc_out = req_loc_fu_54;

assign select_ln104_1_fu_207_p3 = ((and_ln104_1_fu_201_p2[0:0] == 1'b1) ? select_ln104_fu_185_p3 : req_loc_123_fu_193_p3);

assign select_ln104_fu_185_p3 = ((and_ln104_fu_171_p2[0:0] == 1'b1) ? zext_ln104_fu_181_p1 : ap_sig_allocacmp_req_loc_load_1);

assign trunc_ln104_fu_177_p1 = ap_sig_allocacmp_i_2[0:0];

assign zext_ln104_fu_181_p1 = trunc_ln104_fu_177_p1;

assign zext_ln108_1_fu_144_p1 = add_ln108_fu_138_p2;

assign zext_ln108_fu_134_p1 = ap_sig_allocacmp_i_2;

endmodule //system_top_update_count_Pipeline_SET_COUNT
