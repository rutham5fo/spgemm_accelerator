// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_update_count_Pipeline_UP_COUNT_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_1_reload,
        weight_reload,
        cmp38_not,
        cmp50_not,
        icmp_ln88,
        count_val,
        or_ln88,
        cmp59_not,
        ext_count,
        ext_count_cast,
        fetch_count,
        fetch_count_cast,
        weight_3_out,
        weight_3_out_ap_vld,
        weight_2_out,
        weight_2_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] weight_1_reload;
input  [7:0] weight_reload;
input  [0:0] cmp38_not;
input  [0:0] cmp50_not;
input  [0:0] icmp_ln88;
input  [7:0] count_val;
input  [0:0] or_ln88;
input  [0:0] cmp59_not;
input  [7:0] ext_count;
input  [0:0] ext_count_cast;
input  [7:0] fetch_count;
input  [0:0] fetch_count_cast;
output  [7:0] weight_3_out;
output   weight_3_out_ap_vld;
output  [7:0] weight_2_out;
output   weight_2_out_ap_vld;

reg ap_idle;
reg weight_3_out_ap_vld;
reg weight_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln84_fu_182_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [1:0] i_1_fu_66;
wire   [1:0] add_ln84_fu_188_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i;
reg   [7:0] weight_fu_70;
wire   [7:0] weight_4_fu_388_p3;
reg   [7:0] ap_sig_allocacmp_weight_load_1;
reg   [7:0] weight_1_fu_74;
wire   [7:0] weight_5_fu_364_p3;
reg   [7:0] ap_sig_allocacmp_weight_1_load_1;
wire   [0:0] icmp_ln85_fu_200_p2;
wire   [0:0] icmp_ln93_fu_212_p2;
wire   [7:0] select_ln88_fu_224_p3;
wire   [0:0] icmp_ln96_fu_248_p2;
wire   [7:0] tmp_s_fu_260_p4;
wire   [7:0] weight_2_fu_270_p2;
wire   [7:0] tmp_174_fu_292_p4;
wire   [7:0] weight_3_fu_302_p2;
wire   [0:0] or_ln85_fu_206_p2;
wire   [7:0] select_ln97_fu_308_p3;
wire   [7:0] select_ln88_1_fu_232_p3;
wire   [0:0] or_ln93_fu_218_p2;
wire   [0:0] xor_ln93_fu_332_p2;
wire   [0:0] and_ln93_fu_338_p2;
wire   [7:0] select_ln94_fu_276_p3;
wire   [7:0] select_ln85_fu_324_p3;
wire   [0:0] or_ln96_fu_254_p2;
wire   [0:0] and_ln96_fu_352_p2;
wire   [0:0] and_ln96_1_fu_358_p2;
wire   [7:0] select_ln93_fu_344_p3;
wire   [7:0] select_ln97_1_fu_316_p3;
wire   [7:0] select_ln88_2_fu_240_p3;
wire   [7:0] select_ln94_1_fu_284_p3;
wire   [7:0] select_ln85_1_fu_372_p3;
wire   [7:0] select_ln93_1_fu_380_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

system_top_mux_28_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mux_28_8_1_1_U3570(
    .din0(ap_sig_allocacmp_weight_load_1),
    .din1(ap_sig_allocacmp_weight_1_load_1),
    .din2(ext_count),
    .dout(tmp_s_fu_260_p4)
);

system_top_mux_28_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mux_28_8_1_1_U3571(
    .din0(ap_sig_allocacmp_weight_load_1),
    .din1(ap_sig_allocacmp_weight_1_load_1),
    .din2(fetch_count),
    .dout(tmp_174_fu_292_p4)
);

system_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln84_fu_182_p2 == 1'd0)) begin
            i_1_fu_66 <= add_ln84_fu_188_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_66 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln84_fu_182_p2 == 1'd0)) begin
            weight_1_fu_74 <= weight_5_fu_364_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            weight_1_fu_74 <= weight_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln84_fu_182_p2 == 1'd0)) begin
            weight_fu_70 <= weight_4_fu_388_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            weight_fu_70 <= weight_reload;
        end
    end
end

always @ * begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln84_fu_182_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ * begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ * begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 2'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_66;
    end
end

always @ * begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_weight_1_load_1 = weight_1_reload;
    end else begin
        ap_sig_allocacmp_weight_1_load_1 = weight_1_fu_74;
    end
end

always @ * begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_weight_load_1 = weight_reload;
    end else begin
        ap_sig_allocacmp_weight_load_1 = weight_fu_70;
    end
end

always @ * begin
    if (((icmp_ln84_fu_182_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        weight_2_out_ap_vld = 1'b1;
    end else begin
        weight_2_out_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln84_fu_182_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        weight_3_out_ap_vld = 1'b1;
    end else begin
        weight_3_out_ap_vld = 1'b0;
    end
end

always @ * begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln84_fu_188_p2 = (ap_sig_allocacmp_i + 2'd1);

assign and_ln93_fu_338_p2 = (xor_ln93_fu_332_p2 & or_ln85_fu_206_p2);

assign and_ln96_1_fu_358_p2 = (or_ln85_fu_206_p2 & and_ln96_fu_352_p2);

assign and_ln96_fu_352_p2 = (or_ln96_fu_254_p2 & or_ln93_fu_218_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ * begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln84_fu_182_p2 = ((ap_sig_allocacmp_i == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_200_p2 = ((ap_sig_allocacmp_i != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_212_p2 = ((ap_sig_allocacmp_i != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_248_p2 = ((ap_sig_allocacmp_i != 2'd2) ? 1'b1 : 1'b0);

assign or_ln85_fu_206_p2 = (icmp_ln85_fu_200_p2 | cmp38_not);

assign or_ln93_fu_218_p2 = (icmp_ln93_fu_212_p2 | cmp50_not);

assign or_ln96_fu_254_p2 = (icmp_ln96_fu_248_p2 | cmp59_not);

assign select_ln85_1_fu_372_p3 = ((or_ln85_fu_206_p2[0:0] == 1'b1) ? select_ln97_1_fu_316_p3 : select_ln88_2_fu_240_p3);

assign select_ln85_fu_324_p3 = ((or_ln85_fu_206_p2[0:0] == 1'b1) ? select_ln97_fu_308_p3 : select_ln88_1_fu_232_p3);

assign select_ln88_1_fu_232_p3 = ((or_ln88[0:0] == 1'b1) ? ap_sig_allocacmp_weight_1_load_1 : count_val);

assign select_ln88_2_fu_240_p3 = ((or_ln88[0:0] == 1'b1) ? select_ln88_fu_224_p3 : ap_sig_allocacmp_weight_load_1);

assign select_ln88_fu_224_p3 = ((icmp_ln88[0:0] == 1'b1) ? ap_sig_allocacmp_weight_load_1 : count_val);

assign select_ln93_1_fu_380_p3 = ((and_ln93_fu_338_p2[0:0] == 1'b1) ? select_ln94_1_fu_284_p3 : select_ln85_1_fu_372_p3);

assign select_ln93_fu_344_p3 = ((and_ln93_fu_338_p2[0:0] == 1'b1) ? select_ln94_fu_276_p3 : select_ln85_fu_324_p3);

assign select_ln94_1_fu_284_p3 = ((ext_count_cast[0:0] == 1'b1) ? ap_sig_allocacmp_weight_load_1 : weight_2_fu_270_p2);

assign select_ln94_fu_276_p3 = ((ext_count_cast[0:0] == 1'b1) ? weight_2_fu_270_p2 : ap_sig_allocacmp_weight_1_load_1);

assign select_ln97_1_fu_316_p3 = ((fetch_count_cast[0:0] == 1'b1) ? ap_sig_allocacmp_weight_load_1 : weight_3_fu_302_p2);

assign select_ln97_fu_308_p3 = ((fetch_count_cast[0:0] == 1'b1) ? weight_3_fu_302_p2 : ap_sig_allocacmp_weight_1_load_1);

assign weight_2_fu_270_p2 = ($signed(tmp_s_fu_260_p4) + $signed(8'd255));

assign weight_2_out = weight_fu_70;

assign weight_3_fu_302_p2 = ($signed(tmp_174_fu_292_p4) + $signed(8'd255));

assign weight_3_out = weight_1_fu_74;

assign weight_4_fu_388_p3 = ((and_ln96_1_fu_358_p2[0:0] == 1'b1) ? ap_sig_allocacmp_weight_load_1 : select_ln93_1_fu_380_p3);

assign weight_5_fu_364_p3 = ((and_ln96_1_fu_358_p2[0:0] == 1'b1) ? ap_sig_allocacmp_weight_1_load_1 : select_ln93_fu_344_p3);

assign xor_ln93_fu_332_p2 = (or_ln93_fu_218_p2 ^ 1'd1);

endmodule //system_top_update_count_Pipeline_UP_COUNT_1
