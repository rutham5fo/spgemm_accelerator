// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_output_writeback_Pipeline_WRITEBACK_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_result_values_data_M_elems_address0,
        tmp_result_values_data_M_elems_ce0,
        tmp_result_values_data_M_elems_we0,
        tmp_result_values_data_M_elems_d0,
        tmp_result_indices_data_M_elems_address0,
        tmp_result_indices_data_M_elems_ce0,
        tmp_result_indices_data_M_elems_we0,
        tmp_result_indices_data_M_elems_d0,
        tmp_result_len_out,
        tmp_result_len_out_ap_vld,
        comp_data_out_address0,
        comp_data_out_ce0,
        comp_data_out_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] tmp_result_values_data_M_elems_address0;
output   tmp_result_values_data_M_elems_ce0;
output   tmp_result_values_data_M_elems_we0;
output  [7:0] tmp_result_values_data_M_elems_d0;
output  [5:0] tmp_result_indices_data_M_elems_address0;
output   tmp_result_indices_data_M_elems_ce0;
output   tmp_result_indices_data_M_elems_we0;
output  [7:0] tmp_result_indices_data_M_elems_d0;
output  [63:0] tmp_result_len_out;
output   tmp_result_len_out_ap_vld;
output  [5:0] comp_data_out_address0;
output   comp_data_out_ce0;
input  [16:0] comp_data_out_q0;

reg ap_idle;
reg tmp_result_values_data_M_elems_ce0;
reg tmp_result_values_data_M_elems_we0;
reg tmp_result_indices_data_M_elems_ce0;
reg tmp_result_indices_data_M_elems_we0;
reg tmp_result_len_out_ap_vld;
reg comp_data_out_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln659_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] data_last_reg_104;
reg   [0:0] icmp_ln659_reg_209;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] trunc_ln665_cast_fu_148_p1;
reg   [63:0] trunc_ln665_cast_reg_213;
reg   [0:0] ap_phi_mux_data_last_phi_fu_107_p4;
reg   [0:0] ap_phi_mux_data_last_1_phi_fu_120_p4;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [0:0] ap_phi_reg_pp0_iter1_data_last_1_reg_115;
wire   [0:0] ap_phi_reg_pp0_iter0_data_last_1_reg_115;
reg   [5:0] k_fu_50;
wire   [5:0] tmp_result_len_1_fu_142_p2;
reg   [5:0] ap_sig_allocacmp_k_1;
reg   [63:0] tmp_result_len_fu_54;
wire   [63:0] zext_ln665_fu_153_p1;
wire    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_202;
reg    ap_condition_113;
reg    ap_condition_208;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

system_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_113)) begin
        if (((ap_phi_mux_data_last_phi_fu_107_p4 == 1'd1) & (icmp_ln659_fu_136_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_data_last_1_reg_115 <= 1'd1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_data_last_1_reg_115 <= ap_phi_reg_pp0_iter0_data_last_1_reg_115;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            data_last_reg_104 <= 1'd0;
        end else if ((1'b1 == ap_condition_208)) begin
            data_last_reg_104 <= ap_phi_mux_data_last_1_phi_fu_120_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln659_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_50 <= tmp_result_len_1_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_50 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln659_reg_209 <= icmp_ln659_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_data_last_phi_fu_107_p4 == 1'd0) & (icmp_ln659_fu_136_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_result_len_fu_54[5 : 0] <= zext_ln665_fu_153_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln659_fu_136_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln665_cast_reg_213[5 : 0] <= trunc_ln665_cast_fu_148_p1[5 : 0];
    end
end

always @ * begin
    if (((icmp_ln659_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ * begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ * begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln659_reg_209 == 1'd0) & (data_last_reg_104 == 1'd0))) begin
        ap_phi_mux_data_last_1_phi_fu_120_p4 = comp_data_out_q0[32'd16];
    end else begin
        ap_phi_mux_data_last_1_phi_fu_120_p4 = ap_phi_reg_pp0_iter1_data_last_1_reg_115;
    end
end

always @ * begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_data_last_phi_fu_107_p4 = 1'd0;
        end else if ((1'b1 == ap_condition_202)) begin
            ap_phi_mux_data_last_phi_fu_107_p4 = ap_phi_mux_data_last_1_phi_fu_120_p4;
        end else begin
            ap_phi_mux_data_last_phi_fu_107_p4 = 1'd0;
        end
    end else begin
        ap_phi_mux_data_last_phi_fu_107_p4 = 1'd0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_k_1 = k_fu_50;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        comp_data_out_ce0 = 1'b1;
    end else begin
        comp_data_out_ce0 = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_result_indices_data_M_elems_ce0 = 1'b1;
    end else begin
        tmp_result_indices_data_M_elems_ce0 = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln659_reg_209 == 1'd0) & (data_last_reg_104 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_result_indices_data_M_elems_we0 = 1'b1;
    end else begin
        tmp_result_indices_data_M_elems_we0 = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln659_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_result_len_out_ap_vld = 1'b1;
    end else begin
        tmp_result_len_out_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_result_values_data_M_elems_ce0 = 1'b1;
    end else begin
        tmp_result_values_data_M_elems_ce0 = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln659_reg_209 == 1'd0) & (data_last_reg_104 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_result_values_data_M_elems_we0 = 1'b1;
    end else begin
        tmp_result_values_data_M_elems_we0 = 1'b0;
    end
end

always @ * begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ * begin
    ap_condition_113 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ * begin
    ap_condition_202 = ((icmp_ln659_reg_209 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ * begin
    ap_condition_208 = ((icmp_ln659_reg_209 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_data_last_1_reg_115 = 'bx;

assign comp_data_out_address0 = trunc_ln665_cast_fu_148_p1;

assign icmp_ln659_fu_136_p2 = ((ap_sig_allocacmp_k_1 == 6'd41) ? 1'b1 : 1'b0);

assign tmp_result_indices_data_M_elems_address0 = trunc_ln665_cast_reg_213;

assign tmp_result_indices_data_M_elems_d0 = {{comp_data_out_q0[15:8]}};

assign tmp_result_len_1_fu_142_p2 = (ap_sig_allocacmp_k_1 + 6'd1);

assign tmp_result_len_out = tmp_result_len_fu_54;

assign tmp_result_values_data_M_elems_address0 = trunc_ln665_cast_reg_213;

assign tmp_result_values_data_M_elems_d0 = comp_data_out_q0[7:0];

assign trunc_ln665_cast_fu_148_p1 = ap_sig_allocacmp_k_1;

assign zext_ln665_fu_153_p1 = tmp_result_len_1_fu_142_p2;

always @ (posedge ap_clk) begin
    trunc_ln665_cast_reg_213[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_result_len_fu_54[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //system_top_output_writeback_Pipeline_WRITEBACK_LOOP
