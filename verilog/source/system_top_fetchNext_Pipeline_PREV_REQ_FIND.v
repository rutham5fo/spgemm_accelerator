// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_fetchNext_Pipeline_PREV_REQ_FIND (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln368,
        fetch_indA_0,
        fetch_indA_1,
        prev_req_second_out,
        prev_req_second_out_ap_vld,
        prev_req_first_out,
        prev_req_first_out_ap_vld,
        procRegs_regs_prev_req_row_address0,
        procRegs_regs_prev_req_row_ce0,
        procRegs_regs_prev_req_row_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] zext_ln368;
input  [7:0] fetch_indA_0;
input  [7:0] fetch_indA_1;
output  [0:0] prev_req_second_out;
output   prev_req_second_out_ap_vld;
output  [0:0] prev_req_first_out;
output   prev_req_first_out_ap_vld;
output  [2:0] procRegs_regs_prev_req_row_address0;
output   procRegs_regs_prev_req_row_ce0;
input  [7:0] procRegs_regs_prev_req_row_q0;

reg ap_idle;
reg prev_req_second_out_ap_vld;
reg prev_req_first_out_ap_vld;
reg procRegs_regs_prev_req_row_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln367_fu_127_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] prev_req_second_reg_95;
reg   [0:0] prev_req_first_reg_107;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln367_reg_198;
wire   [0:0] prev_req_first_1_fu_164_p2;
wire   [0:0] prev_req_second_1_fu_175_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln368_2_fu_149_p1;
reg   [1:0] i_fu_46;
wire   [1:0] add_ln367_fu_133_p2;
reg   [1:0] ap_sig_allocacmp_i_10;
wire    ap_block_pp0_stage0_01001;
wire   [2:0] zext_ln368_1_fu_139_p1;
wire   [2:0] add_ln368_fu_143_p2;
wire   [0:0] icmp_ln368_fu_159_p2;
wire   [0:0] icmp_ln369_fu_170_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_183;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

system_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln367_fu_127_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_46 <= add_ln367_fu_133_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_46 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_183)) begin
            prev_req_first_reg_107 <= prev_req_first_1_fu_164_p2;
        end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            prev_req_first_reg_107 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_183)) begin
            prev_req_second_reg_95 <= prev_req_second_1_fu_175_p2;
        end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            prev_req_second_reg_95 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln367_reg_198 <= icmp_ln367_fu_127_p2;
    end
end

always @ * begin
    if (((icmp_ln367_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ * begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ * begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_10 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_10 = i_fu_46;
    end
end

always @ * begin
    if (((icmp_ln367_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        prev_req_first_out_ap_vld = 1'b1;
    end else begin
        prev_req_first_out_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln367_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        prev_req_second_out_ap_vld = 1'b1;
    end else begin
        prev_req_second_out_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        procRegs_regs_prev_req_row_ce0 = 1'b1;
    end else begin
        procRegs_regs_prev_req_row_ce0 = 1'b0;
    end
end

always @ * begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln367_fu_133_p2 = (ap_sig_allocacmp_i_10 + 2'd1);

assign add_ln368_fu_143_p2 = (zext_ln368 + zext_ln368_1_fu_139_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ * begin
    ap_condition_183 = ((icmp_ln367_reg_198 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln367_fu_127_p2 = ((ap_sig_allocacmp_i_10 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln368_fu_159_p2 = ((fetch_indA_0 == procRegs_regs_prev_req_row_q0) ? 1'b1 : 1'b0);

assign icmp_ln369_fu_170_p2 = ((fetch_indA_1 == procRegs_regs_prev_req_row_q0) ? 1'b1 : 1'b0);

assign prev_req_first_1_fu_164_p2 = (prev_req_first_reg_107 | icmp_ln368_fu_159_p2);

assign prev_req_first_out = prev_req_first_reg_107;

assign prev_req_second_1_fu_175_p2 = (prev_req_second_reg_95 | icmp_ln369_fu_170_p2);

assign prev_req_second_out = prev_req_second_reg_95;

assign procRegs_regs_prev_req_row_address0 = zext_ln368_2_fu_149_p1;

assign zext_ln368_1_fu_139_p1 = ap_sig_allocacmp_i_10;

assign zext_ln368_2_fu_149_p1 = add_ln368_fu_143_p2;

endmodule //system_top_fetchNext_Pipeline_PREV_REQ_FIND
