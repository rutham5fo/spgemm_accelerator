// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_access_memB_Pipeline_INIT_REGS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        system_top_bool_bool_unsigned_int_unsigned_int_procVecType_const_procVe_58,
        system_top_bool_bool_unsigned_int_unsigned_int_procVecType_const_procVe_59,
        system_top_bool_bool_unsigned_int_unsigned_int_procVecType_const_procVe_60,
        system_top_bool_bool_unsigned_int_unsigned_int_procVecType_const_procVe_61,
        core_init,
        tmp_write_ptr_3_0_out,
        tmp_write_ptr_3_0_out_ap_vld,
        tmp_write_ptr_2_0_out,
        tmp_write_ptr_2_0_out_ap_vld,
        tmp_write_ptr_1_0_out,
        tmp_write_ptr_1_0_out_ap_vld,
        tmp_write_ptr_0_0_out,
        tmp_write_ptr_0_0_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] system_top_bool_bool_unsigned_int_unsigned_int_procVecType_const_procVe_58;
input  [7:0] system_top_bool_bool_unsigned_int_unsigned_int_procVecType_const_procVe_59;
input  [7:0] system_top_bool_bool_unsigned_int_unsigned_int_procVecType_const_procVe_60;
input  [7:0] system_top_bool_bool_unsigned_int_unsigned_int_procVecType_const_procVe_61;
input  [0:0] core_init;
output  [7:0] tmp_write_ptr_3_0_out;
output   tmp_write_ptr_3_0_out_ap_vld;
output  [7:0] tmp_write_ptr_2_0_out;
output   tmp_write_ptr_2_0_out_ap_vld;
output  [7:0] tmp_write_ptr_1_0_out;
output   tmp_write_ptr_1_0_out_ap_vld;
output  [7:0] tmp_write_ptr_0_0_out;
output   tmp_write_ptr_0_0_out_ap_vld;

reg ap_idle;
reg tmp_write_ptr_3_0_out_ap_vld;
reg tmp_write_ptr_2_0_out_ap_vld;
reg tmp_write_ptr_1_0_out_ap_vld;
reg tmp_write_ptr_0_0_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln83_fu_144_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] k_fu_58;
wire   [2:0] add_ln83_fu_150_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_k_5;
reg   [7:0] tmp_write_ptr_3_1_fu_62;
wire   [7:0] tmp_write_ptr_3_8_fu_248_p3;
reg   [7:0] tmp_write_ptr_3_2_fu_66;
wire   [7:0] tmp_write_ptr_3_7_fu_240_p3;
reg   [7:0] tmp_write_ptr_3_3_fu_70;
wire   [7:0] tmp_write_ptr_3_6_fu_232_p3;
reg   [7:0] tmp_write_ptr_3_4_fu_74;
wire   [7:0] tmp_write_ptr_3_fu_224_p3;
wire   [7:0] tmp_fu_168_p6;
wire   [1:0] trunc_ln84_fu_190_p1;
wire   [0:0] icmp_ln84_2_fu_206_p2;
wire   [0:0] icmp_ln84_1_fu_200_p2;
wire   [0:0] or_ln84_fu_212_p2;
wire   [0:0] icmp_ln84_fu_194_p2;
wire   [0:0] or_ln84_1_fu_218_p2;
wire   [7:0] tmp_write_ptr_3_9_fu_182_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

system_top_mux_43_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_43_8_1_1_U5359(
    .din0(system_top_bool_bool_unsigned_int_unsigned_int_procVecType_const_procVe_58),
    .din1(system_top_bool_bool_unsigned_int_unsigned_int_procVecType_const_procVe_59),
    .din2(system_top_bool_bool_unsigned_int_unsigned_int_procVecType_const_procVe_60),
    .din3(system_top_bool_bool_unsigned_int_unsigned_int_procVecType_const_procVe_61),
    .din4(ap_sig_allocacmp_k_5),
    .dout(tmp_fu_168_p6)
);

system_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln83_fu_144_p2 == 1'd0)) begin
            k_fu_58 <= add_ln83_fu_150_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_58 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        tmp_write_ptr_3_1_fu_62 <= tmp_write_ptr_3_8_fu_248_p3;
        tmp_write_ptr_3_2_fu_66 <= tmp_write_ptr_3_7_fu_240_p3;
        tmp_write_ptr_3_3_fu_70 <= tmp_write_ptr_3_6_fu_232_p3;
        tmp_write_ptr_3_4_fu_74 <= tmp_write_ptr_3_fu_224_p3;
    end
end

always @ * begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln83_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ * begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ * begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ * begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_k_5 = 3'd0;
    end else begin
        ap_sig_allocacmp_k_5 = k_fu_58;
    end
end

always @ * begin
    if (((icmp_ln83_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        tmp_write_ptr_0_0_out_ap_vld = 1'b1;
    end else begin
        tmp_write_ptr_0_0_out_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln83_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        tmp_write_ptr_1_0_out_ap_vld = 1'b1;
    end else begin
        tmp_write_ptr_1_0_out_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln83_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        tmp_write_ptr_2_0_out_ap_vld = 1'b1;
    end else begin
        tmp_write_ptr_2_0_out_ap_vld = 1'b0;
    end
end

always @ * begin
    if (((icmp_ln83_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        tmp_write_ptr_3_0_out_ap_vld = 1'b1;
    end else begin
        tmp_write_ptr_3_0_out_ap_vld = 1'b0;
    end
end

always @ * begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln83_fu_150_p2 = (ap_sig_allocacmp_k_5 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ * begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln83_fu_144_p2 = ((ap_sig_allocacmp_k_5 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln84_1_fu_200_p2 = ((trunc_ln84_fu_190_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln84_2_fu_206_p2 = ((trunc_ln84_fu_190_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_194_p2 = ((trunc_ln84_fu_190_p1 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln84_1_fu_218_p2 = (or_ln84_fu_212_p2 | icmp_ln84_fu_194_p2);

assign or_ln84_fu_212_p2 = (icmp_ln84_2_fu_206_p2 | icmp_ln84_1_fu_200_p2);

assign tmp_write_ptr_0_0_out = tmp_write_ptr_3_1_fu_62;

assign tmp_write_ptr_1_0_out = tmp_write_ptr_3_2_fu_66;

assign tmp_write_ptr_2_0_out = tmp_write_ptr_3_3_fu_70;

assign tmp_write_ptr_3_0_out = tmp_write_ptr_3_4_fu_74;

assign tmp_write_ptr_3_6_fu_232_p3 = ((icmp_ln84_2_fu_206_p2[0:0] == 1'b1) ? tmp_write_ptr_3_9_fu_182_p3 : tmp_write_ptr_3_3_fu_70);

assign tmp_write_ptr_3_7_fu_240_p3 = ((icmp_ln84_1_fu_200_p2[0:0] == 1'b1) ? tmp_write_ptr_3_9_fu_182_p3 : tmp_write_ptr_3_2_fu_66);

assign tmp_write_ptr_3_8_fu_248_p3 = ((icmp_ln84_fu_194_p2[0:0] == 1'b1) ? tmp_write_ptr_3_9_fu_182_p3 : tmp_write_ptr_3_1_fu_62);

assign tmp_write_ptr_3_9_fu_182_p3 = ((core_init[0:0] == 1'b1) ? 8'd0 : tmp_fu_168_p6);

assign tmp_write_ptr_3_fu_224_p3 = ((or_ln84_1_fu_218_p2[0:0] == 1'b1) ? tmp_write_ptr_3_4_fu_74 : tmp_write_ptr_3_9_fu_182_p3);

assign trunc_ln84_fu_190_p1 = ap_sig_allocacmp_k_5[1:0];

endmodule //system_top_access_memB_Pipeline_INIT_REGS
